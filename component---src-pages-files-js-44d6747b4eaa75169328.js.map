{"version":3,"sources":["webpack:///./src/components/Header.js","webpack:///./src/components/Footer.js","webpack:///./src/components/Layout.js","webpack:///./src/pages/files.js"],"names":["Header","refs","dir","links","forEach","ref","push","key","href","name","className","Footer","props","Layout","children","query","render","data","site","siteMetadata","header_refs","footer_refs","Files","pages","allMarkdownRemark","nodes","directories","Set","map","page","parent","relativeDirectory","sort","directoryIndex","link","fields","slug","id"],"mappings":"8IAqBeA,G,oBAlBA,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IACbC,EAAQ,GAKd,OAJAF,EAAKG,SAAQ,SAACC,GACVF,EAAMG,KAAK,wBAAIC,IAAKF,EAAIA,KAAK,uBAAGG,KAAMH,EAAIA,KAAMA,EAAII,WAIpD,gCACI,yBAAKC,UAAU,QACH,MAAPR,GAAuB,KAARA,GAAc,yBAAKQ,UAAU,aAAaR,GAC1D,4BACKC,OCENQ,EAbA,SAACC,GACZ,IAAMT,EAAQ,GAKd,OAJAS,EAAMX,KAAKG,SAAQ,SAACC,GAChBF,EAAMG,KAAK,uBAAGC,IAAKF,EAAIA,IAAKG,KAAMH,EAAIA,KAAMA,EAAII,UAIhD,gCACKN,IC2BEU,IAhCA,SAAC,GAAqB,IAApBX,EAAmB,EAAnBA,IAAKY,EAAc,EAAdA,SAClB,OACI,kBAAC,cAAD,CACIC,MAAK,aAgBTC,OAAQ,SAAAC,GAAI,OACR,yBAAKP,UAAU,aACX,kBAAC,EAAD,CAAQT,KAAMgB,EAAKC,KAAKC,aAAaC,YAAalB,IAAKA,IACvD,8BACKY,GAEL,kBAAC,EAAD,CAAQb,KAAMgB,EAAKC,KAAKC,aAAaE,gBAvB7C,W,kuCCHR,IAkCaN,EAAK,aAiBHO,UAnDD,SAAC,GAAY,IACjBC,EADgB,EAAVN,KACOO,kBAAkBC,MAC/BC,EAAc,EAAI,IAAIC,IAAIJ,EAAMK,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAOC,uBAAqBC,OAEjFC,EAAiB,EACrB,OACI,kBAAC,IAAD,KACI,yBAAKvB,UAAU,OACX,qCACA,6BACI,4BACKgB,EAAYE,KAAI,SAAC1B,GAAD,OAAS,wBAAIK,IAAKL,GAAK,uBAAGM,KAAI,IAAMN,GAAb,IAAyBA,UAI7E,qCACA,yBAAKQ,UAAU,SACX,4BACKa,EAAMK,KAAI,SAACC,GACR,IAAMK,EAAO,uBAAG1B,KAAMqB,EAAKM,OAAOC,MAAOP,EAAKM,OAAOC,MACrD,OAAIP,EAAKC,OAAOC,oBAAsBL,EAAYO,IAC9CA,GAAkB,EACX,wBAAI1B,IAAK2B,EAAMG,GAAIR,EAAKC,OAAOC,mBAAoBG,IAEnD,wBAAI3B,IAAK2B,GAAOA,W","file":"component---src-pages-files-js-44d6747b4eaa75169328.js","sourcesContent":["import React from \"react\"\nimport \"../assets/sass/main.scss\"\n\nconst Header = ({refs, dir}) => {\n    const links = [];\n    refs.forEach((ref) => {\n        links.push(<li key={ref.ref}><a href={ref.ref}>{ref.name}</a></li>);\n    });\n\n    return (\n        <header>\n            <div className=\"menu\">\n                {dir != null && dir !== \"\" && <div className=\"directory\">{dir}</div>}\n                <ul>\n                    {links}\n                </ul>\n            </div>\n        </header>\n    );\n}\n\nexport default Header","import React from \"react\"\nimport \"../assets/sass/main.scss\"\n\nconst Footer = (props) => {\n    const links = [];\n    props.refs.forEach((ref) => {\n        links.push(<a key={ref.ref} href={ref.ref}>{ref.name}</a>);\n    });\n\n    return (\n        <footer>\n            {links}\n        </footer>\n    );\n}\n\nexport default Footer","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Header from './Header'\nimport Footer from './Footer'\nimport \"../assets/sass/main.scss\"\n\nconst Layout = ({dir, children}) => {\n    return (\n        <StaticQuery\n            query={graphql`\n                query {\n                    site {\n                    siteMetadata {\n                        header_refs {\n                            name,\n                            ref,\n                        },\n                        footer_refs {\n                            name,\n                            ref,\n                        }\n                    }\n                    }\n                }\n            `}\n        render={data => (\n            <div className='container'>\n                <Header refs={data.site.siteMetadata.header_refs} dir={dir}/>\n                <main>\n                    {children}\n                </main>\n                <Footer refs={data.site.siteMetadata.footer_refs}/>\n            </div>\n        )}\n        />\n    )\n}\n\nexport default Layout","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout';\nimport \"../assets/sass/main.scss\"\n\nconst Files = ({data}) => {\n    const pages = data.allMarkdownRemark.nodes\n    const directories = [...new Set(pages.map((page) => page.parent.relativeDirectory))].sort()\n\n    let directoryIndex = 0\n    return (\n        <Layout>\n            <div className=\"toc\">\n                <h2>Jumps</h2>\n                <div>\n                    <ul>\n                        {directories.map((dir) => <li key={dir}><a href={`#${dir}`}>{`/${dir}`}</a></li>)}\n                    </ul>\n                </div>\n            </div>\n            <h3>Files</h3>\n            <div className=\"links\">\n                <ul>\n                    {pages.map((page) => {\n                        const link = <a href={page.fields.slug}>{page.fields.slug}</a>\n                        if (page.parent.relativeDirectory === directories[directoryIndex]) {                           \n                            directoryIndex += 1\n                            return <li key={link} id={page.parent.relativeDirectory}>{link}</li>\n                        } else {\n                            return <li key={link}>{link}</li>\n                        }\n                    })}\n                </ul>\n            </div>\n\n        </Layout>\n    );\n}\n\nexport const query = graphql`\nquery {\n    allMarkdownRemark(sort: {fields: fields___slug, order: ASC}) {\n      nodes {\n        fields {\n          slug\n        }\n        parent {\n          ... on File {\n            relativeDirectory\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Files"],"sourceRoot":""}